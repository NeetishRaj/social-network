// Generated by CoffeeScript 2.3.0
(function() {
  'use strict';
  var fs, mime, path, url;

  mime = require('mime');

  path = require('path');

  url = require('url');

  fs = require('fs');

  module.exports = class {
    constructor() {
      this.handlers = [];
    }

    add(method, pattern, handler) {
      var params;
      params = [];
      if (typeof pattern === 'string') {
        pattern = pattern.replace(/:([_a-z][_a-z0-9]*)/gi, function(a, b) {
          if (~params.indexOf(b)) {
            throw Error('You have the same param name: ' + b);
          }
          params.push(b);
          return '([^/]+?)';
        });
        pattern = RegExp('^' + pattern + '/?$');
      }
      this.handlers.push({method, pattern, handler, params});
      return this;
    }

    handle(req, res) {
      var handler, i, j, k, len, match, method, params, pattern, ref, ref1;
      ref = this.handlers;
      for (j = 0, len = ref.length; j < len; j++) {
        ({method, pattern, handler, params} = ref[j]);
        if (!(method === req.method && (match = pattern.exec(req.url)))) {
          continue;
        }
        req.params = {};
        for (i = k = 0, ref1 = params.length; (0 <= ref1 ? k < ref1 : k > ref1); i = 0 <= ref1 ? ++k : --k) {
          req.params[params[i]] = match[i + 1];
        }
        return handler;
      }
    }

    parseURL(req) {
      // console.log url.parse req.url
      if (req.headers.referer) {
        // match protocol and host
        return req.url.slice(req.headers.referer.replace(/^(?:[a-z]+:\/\/)(?:[\w.]+(?::\d+)?)/gi, '').length);
      }
      return req.url;
    }

  };

  module.exports.static = function(scope) {
    return function(req, res) {
      var filepath, headers, type;
      filepath = path.join(scope, req.url);
      if ((type = mime.getType(filepath))) {
        headers = {
          'Content-Type': type
        };
      }
      return fs.access(filepath, fs.constants.F_OK | fs.constants.R_OK, function(err) {
        if (err) {
          res.writeHead(404, headers);
          res.end();
          return;
        }
        return fs.readFile(filepath, 'utf8', function(err, data) {
          if (err) {
            res.writeHead(404, headers);
            return res.end();
          } else {
            res.writeHead(200, headers);
            return res.end(data);
          }
        });
      });
    };
  };

}).call(this);

//# sourceMappingURL=URLHandlers.js.map
